# send_email.py
import yagmail
import base64
import pandas as pd

def send_email(username, password, recipient, subject, body):
    print('username', username, 'subject', subject)
    yag = yagmail.SMTP(username, password)
    yag.send(to=recipient, subject=subject, contents=body)
    print('Email sent successfully')

if __name__ == '__main__':
    import sys
    import json
    content = ''
    repo_data_str = sys.argv[5]
    # repo_data_str = 'eyJhbGwiOlt7InRpdGxlIjoibGVwdG9uYWkvc2VhcmNoX3dpdGhfbGVwdG9uIiwiZGVzY3JpcHRpb24iOiJCdWlsZGluZyBhIHF1aWNrIGNvbnZlcnNhdGlvbi1iYXNlZCBzZWFyY2ggZGVtbyB3aXRoIExlcHRvbiBBSS4iLCJsYW5ndWFnZSI6IlR5cGVTY3JpcHQiLCJzdGFycyI6IjMsNDgyIiwidG9kYXlTdGFycyI6IjEsMzA4IHN0YXJzIHRvZGF5In0seyJ0aXRsZSI6InJhc2J0L0xMTXMtZnJvbS1zY3JhdGNoIiwiZGVzY3JpcHRpb24iOiJJbXBsZW1lbnRpbmcgYSBDaGF0R1BULWxpa2UgTExNIGZyb20gc2NyYXRjaCwgc3RlcCBieSBzdGVwIiwibGFuZ3VhZ2UiOiJKdXB5dGVyIE5vdGVib29rIiwic3RhcnMiOiI1LDQ3NyIsInRvZGF5U3RhcnMiOiIxLDc5OCBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJ2aWtoeWF0L21vb25kcmVhbSIsImRlc2NyaXB0aW9uIjoidGlueSB2aXNpb24gbGFuZ3VhZ2UgbW9kZWwiLCJsYW5ndWFnZSI6IlB5dGhvbiIsInN0YXJzIjoiOTAyIiwidG9kYXlTdGFycyI6IjEzOCBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJmZWRlcmljby1idXNhdG8vTW9kZXJuLUNQUC1Qcm9ncmFtbWluZyIsImRlc2NyaXB0aW9uIjoiTW9kZXJuIEMrKyBQcm9ncmFtbWluZyBDb3Vyc2UgKEMrKzExLzE0LzE3LzIwLzIzKSIsImxhbmd1YWdlIjoiIiwic3RhcnMiOiI5LDQ4OCIsInRvZGF5U3RhcnMiOiI0NyBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJLYWlzZW5BbWluL2Nfc3RkIiwiZGVzY3JpcHRpb24iOiJJbXBsZW1lbnRhdGlvbiBvZiBDKysgc3RhbmRhcmQgbGlicmFyaWVzIGluIEMiLCJsYW5ndWFnZSI6IkMiLCJzdGFycyI6Ijc1NSIsInRvZGF5U3RhcnMiOiIyMzEgc3RhcnMgdG9kYXkifSx7InRpdGxlIjoiaDR4MHItZHovQ1ZFLTIwMjQtMjM4OTciLCJkZXNjcmlwdGlvbiI6IkNWRS0yMDI0LTIzODk3IiwibGFuZ3VhZ2UiOiJQeXRob24iLCJzdGFycyI6Ijk0IiwidG9kYXlTdGFycyI6IjE1IHN0YXJzIHRvZGF5In0seyJ0aXRsZSI6Iklua2JveFNvZnR3YXJlL2V4Y2VsQ1BVIiwiZGVzY3JpcHRpb24iOiIxNi1iaXQgQ1BVIGZvciBFeGNlbCwgYW5kIHJlbGF0ZWQgZmlsZXMiLCJsYW5ndWFnZSI6IlB5dGhvbiIsInN0YXJzIjoiOTUzIiwidG9kYXlTdGFycyI6IjQ4MiBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiIwMS1haS9ZaSIsImRlc2NyaXB0aW9uIjoiQSBzZXJpZXMgb2YgbGFyZ2UgbGFuZ3VhZ2UgbW9kZWxzIHRyYWluZWQgZnJvbSBzY3JhdGNoIGJ5IGRldmVsb3BlcnMgQDAxLWFpIiwibGFuZ3VhZ2UiOiJQeXRob24iLCJzdGFycyI6IjUsNzg0IiwidG9kYXlTdGFycyI6IjQzIHN0YXJzIHRvZGF5In0seyJ0aXRsZSI6InByYWN0aWNhbC10dXRvcmlhbHMvcHJvamVjdC1iYXNlZC1sZWFybmluZyIsImRlc2NyaXB0aW9uIjoiQ3VyYXRlZCBsaXN0IG9mIHByb2plY3QtYmFzZWQgdHV0b3JpYWxzIiwibGFuZ3VhZ2UiOiIiLCJzdGFycyI6IjE1Myw2OTIiLCJ0b2RheVN0YXJzIjoiNzYzIHN0YXJzIHRvZGF5In0seyJ0aXRsZSI6ImZhcmhhbmFzaHJhZmRldi85MERheXNPZkN5YmVyU2VjdXJpdHkiLCJkZXNjcmlwdGlvbiI6IlRoaXMgcmVwb3NpdG9yeSBjb250YWlucyBhIDkwLWRheSBjeWJlcnNlY3VyaXR5IHN0dWR5IHBsYW4sIGFsb25nIHdpdGggcmVzb3VyY2VzIGFuZCBtYXRlcmlhbHMgZm9yIGxlYXJuaW5nIHZhcmlvdXMgY3liZXJzZWN1cml0eSBjb25jZXB0cyBhbmQgdGVjaG5vbG9naWVzLiBUaGUgcGxhbiBpcyBvcmdhbml6ZWQgaW50byBkYWlseSB0YXNrcywgY292ZXJpbmcgdG9waWNzIHN1Y2ggYXMgTmV0d29yayssIFNlY3VyaXR5KywgTGludXgsIFB5dGhvbiwgVHJhZmZpYyBBbmFseXNpcywgR2l0LCBFTEssIEFXUywgQXp1cmUsIGFuZCBIYWNraW5nLiBUaGUgcmVwb3NpdG9yeSBhbHNvIGluY2x1ZGVzIGEgYExFQVJOLm1kIiwibGFuZ3VhZ2UiOiIiLCJzdGFycyI6IjQsMDMyIiwidG9kYXlTdGFycyI6IjE3MSBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJ0cmltc3RyYXkvdGhlLWJvb2stb2Ytc2VjcmV0LWtub3dsZWRnZSIsImRlc2NyaXB0aW9uIjoiQSBjb2xsZWN0aW9uIG9mIGluc3BpcmluZyBsaXN0cywgbWFudWFscywgY2hlYXRzaGVldHMsIGJsb2dzLCBoYWNrcywgb25lLWxpbmVycywgY2xpL3dlYiB0b29scyBhbmQgbW9yZS4iLCJsYW5ndWFnZSI6IiIsInN0YXJzIjoiMTIwLDgzOCIsInRvZGF5U3RhcnMiOiIyNzkgc3RhcnMgdG9kYXkifSx7InRpdGxlIjoibGl6b25neWluZy9teS10diIsImRlc2NyaXB0aW9uIjoi5oiR55qE55S16KeGIOeUteinhuebtOaSrei9r+S7tu+8jOWuieijheWNs+WPr+S9v+eUqCIsImxhbmd1YWdlIjoiQyIsInN0YXJzIjoiMyw0MTEiLCJ0b2RheVN0YXJzIjoiMzc5IHN0YXJzIHRvZGF5In0seyJ0aXRsZSI6ImRhbmllbG1pZXNzbGVyL2ZhYnJpYyIsImRlc2NyaXB0aW9uIjoiZmFicmljIGlzIGFuIG9wZW4tc291cmNlIGZyYW1ld29yayBmb3IgYXVnbWVudGluZyBodW1hbnMgdXNpbmcgQUkuIiwibGFuZ3VhZ2UiOiJQeXRob24iLCJzdGFycyI6IjM3MiIsInRvZGF5U3RhcnMiOiI5MyBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJUYXNraW5nQUkvVGFza2luZ0FJIiwiZGVzY3JpcHRpb24iOiJUaGUgb3BlbiBzb3VyY2UgcGxhdGZvcm0gZm9yIEFJLW5hdGl2ZSBhcHBsaWNhdGlvbiBkZXZlbG9wbWVudC4iLCJsYW5ndWFnZSI6IlB5dGhvbiIsInN0YXJzIjoiNzgyIiwidG9kYXlTdGFycyI6IjMxNiBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJwbGFzbWEtdW1hc3Mvc2NhbGVuZSIsImRlc2NyaXB0aW9uIjoiU2NhbGVuZTogYSBoaWdoLXBlcmZvcm1hbmNlLCBoaWdoLXByZWNpc2lvbiBDUFUsIEdQVSwgYW5kIG1lbW9yeSBwcm9maWxlciBmb3IgUHl0aG9uIHdpdGggQUktcG93ZXJlZCBvcHRpbWl6YXRpb24gcHJvcG9zYWxzIiwibGFuZ3VhZ2UiOiJKYXZhU2NyaXB0Iiwic3RhcnMiOiIxMCw2OTYiLCJ0b2RheVN0YXJzIjoiMjYgc3RhcnMgdG9kYXkifSx7InRpdGxlIjoic2FhZ2FyamhhL0Vuc2VtYmxlIiwiZGVzY3JpcHRpb24iOiJDYXN0IE1hYyB3aW5kb3dzIHRvIHZpc2lvbk9TIiwibGFuZ3VhZ2UiOiJTd2lmdCIsInN0YXJzIjoiMzIxIiwidG9kYXlTdGFycyI6Ijc0IHN0YXJzIHRvZGF5In0seyJ0aXRsZSI6InB1cHBldGVlci9wdXBwZXRlZXIiLCJkZXNjcmlwdGlvbiI6Ik5vZGUuanMgQVBJIGZvciBDaHJvbWUiLCJsYW5ndWFnZSI6IlR5cGVTY3JpcHQiLCJzdGFycyI6Ijg1LDkwMiIsInRvZGF5U3RhcnMiOiIyMCBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJEYXRhVGFsa3NDbHViL2RhdGEtZW5naW5lZXJpbmctem9vbWNhbXAiLCJkZXNjcmlwdGlvbiI6IkZyZWUgRGF0YSBFbmdpbmVlcmluZyBjb3Vyc2UhIiwibGFuZ3VhZ2UiOiJKdXB5dGVyIE5vdGVib29rIiwic3RhcnMiOiIyMCwyNzMiLCJ0b2RheVN0YXJzIjoiMjU1IHN0YXJzIHRvZGF5In0seyJ0aXRsZSI6Im5pY2tub2NobmFjay9NTFRyYWRpbmdCb3QiLCJkZXNjcmlwdGlvbiI6IiIsImxhbmd1YWdlIjoiSFRNTCIsInN0YXJzIjoiMzAzIiwidG9kYXlTdGFycyI6IjE0NCBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJBc2FiZW5laC8zMC1EYXlzLU9mLVB5dGhvbiIsImRlc2NyaXB0aW9uIjoiMzAgZGF5cyBvZiBQeXRob24gcHJvZ3JhbW1pbmcgY2hhbGxlbmdlIGlzIGEgc3RlcC1ieS1zdGVwIGd1aWRlIHRvIGxlYXJuIHRoZSBQeXRob24gcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UgaW4gMzAgZGF5cy4gVGhpcyBjaGFsbGVuZ2UgbWF5IHRha2UgbW9yZSB0aGFuMTAwIGRheXMsIGZvbGxvdyB5b3VyIG93biBwYWNlLiBUaGVzZSB2aWRlb3MgbWF5IGhlbHAgdG9vOiBodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDN1BOUnVubzFyellQYjF4TGE0eWt0dyIsImxhbmd1YWdlIjoiUHl0aG9uIiwic3RhcnMiOiIyOCw2MTgiLCJ0b2RheVN0YXJzIjoiNTMgc3RhcnMgdG9kYXkifSx7InRpdGxlIjoiZmFjZWJvb2tyZXNlYXJjaC9jb2RlbGxhbWEiLCJkZXNjcmlwdGlvbiI6IkluZmVyZW5jZSBjb2RlIGZvciBDb2RlTGxhbWEgbW9kZWxzIiwibGFuZ3VhZ2UiOiJQeXRob24iLCJzdGFycyI6IjEyLDM1MCIsInRvZGF5U3RhcnMiOiIxODQgc3RhcnMgdG9kYXkifSx7InRpdGxlIjoiRnVlbExhYnMvc3dheSIsImRlc2NyaXB0aW9uIjoi8J+MtCBFbXBvd2VyaW5nIGV2ZXJ5b25lIHRvIGJ1aWxkIHJlbGlhYmxlIGFuZCBlZmZpY2llbnQgc21hcnQgY29udHJhY3RzLiIsImxhbmd1YWdlIjoiUnVzdCIsInN0YXJzIjoiNDMsNzc3IiwidG9kYXlTdGFycyI6IjYyNyBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJ2ZXJjZWwvbmV4dC5qcyIsImRlc2NyaXB0aW9uIjoiVGhlIFJlYWN0IEZyYW1ld29yayIsImxhbmd1YWdlIjoiSmF2YVNjcmlwdCIsInN0YXJzIjoiMTE3LDM3MCIsInRvZGF5U3RhcnMiOiI1NCBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJNYXRzdXJpRGF5by9OZWtvQm94Rm9yQW5kcm9pZCIsImRlc2NyaXB0aW9uIjoiTmVrb0JveCBmb3IgQW5kcm9pZCAvIHNpbmctYm94IC8gdW5pdmVyc2FsIHByb3h5IHRvb2xjaGFpbiBmb3IgQW5kcm9pZCIsImxhbmd1YWdlIjoiS290bGluIiwic3RhcnMiOiI2LDUwNCIsInRvZGF5U3RhcnMiOiIyNSBzdGFycyB0b2RheSJ9LHsidGl0bGUiOiJ6ZWRldXMvbml0dGVyIiwiZGVzY3JpcHRpb24iOiJBbHRlcm5hdGl2ZSBUd2l0dGVyIGZyb250LWVuZCIsImxhbmd1YWdlIjoiTmltIiwic3RhcnMiOiI5LDI4NSIsInRvZGF5U3RhcnMiOiI2NSBzdGFycyB0b2RheSJ9XX0='
    repo_data_decoded_bytes = base64.urlsafe_b64decode(repo_data_str)
    repo_data = json.loads(repo_data_decoded_bytes.decode('utf-8'))
    repo_tables_map = {}
    repo_items = repo_data.items()
    for key, repos in repo_items:
        repo_tables_map[key if key else 'None'] = pd.DataFrame(repos)
    for language, repo_data in repo_tables_map.items():
        title = "{} Repos:\n".format(language.capitalize())
        content += "{}{}\n".format(title, repo_data)
    send_email(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], content)



